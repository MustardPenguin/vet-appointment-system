
# General config
availability-service:
  opening-time: 06:00
  closing-time: 20:00

server:
  port: 8184

# Logging
logging:
  level:
    com.vet.appointment.system: DEBUG
    org:
      springframework: ${LOGGING_LEVEL:INFO}

# For Debezium connect
applicationDeploymentName: ${APPLICATION_DEPLOYMENT_NAME:availability-deployment}
databaseHost: ${DATABASE_HOST:localhost}
debeziumHost: ${DEBEZIUM_HOST:http://localhost}:8083/connectors

# Service registry
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_HOST:http://localhost}:8761/eureka
  instance:
    prefer-ip-address: true

# Database
spring:
  application:
    name: "availability-service"
  jpa:
    show-sql: true
    open-in-view: false
  datasource:
    url: jdbc:postgresql://${DATABASE_HOST:localhost}:5432/postgres?stringtype=unspecified&currentSchema=availability
    username: ${POSTGRES_USER:user}
    password: ${POSTGRES_PASSWORD:admin}
    driver-class-name: org.postgresql.Driver
  sql:
    init:
      schema-locations: classpath:init-schema.sql
      mode: always
      platform: postgres
      data-locations: classpath:init-data.sql

# Kafka
kafka-config-data:
  bootstrap-server: ${KAFKA_BOOTSTRAP_HOST:localhost}:${KAFKA_BOOTSTRAP_PORT:29092}
  schema-registry-url: ${SCHEMA_REGISTRY_HOST:http://localhost}:8081
  schema-registry-url-key: schema.registry.url

kafka-producer-data:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer

kafka-consumer-data:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true

kafka-consumer-topic:
  availability-request-topic-name: availability_request.appointment.availability_outbox

kafka-consumer-group-id:
  availability-group-id: availability-topic-consumer